library("calibrate")
# what analysis is being performed
cat("\t Plotting volcano plot for:", condition, "\n")
cond0 <- strsplit(paste(condition, sep=""), split = "condition_")[[1]][2]
cond1 <- strsplit(cond0, split = "_vs_")[[1]][1]
cond2 <- strsplit(cond0, split = "_vs_")[[1]][2]
file <- paste(results_dir, condition, ".txt", sep="")
df <- read.table(file, sep="\t", header = T)
df <- df[order(df$svalue),]
# volcano plot
resPlot <- df
resPlot$Gene <- rownames(resPlot)
lfc <- lfc
p.value <- svalue
#sig.genes <- dim(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc))[1]
sig.genes <- sum(resPlot$svalue < p.value & abs(resPlot$log2FoldChange) > 2, na.rm=TRUE)
outliers <- sum(resPlot$baseMean > 0 & is.na(resPlot$pvalue))
low.counts <- sum(!is.na(resPlot$pvalue) & is.na(resPlot$svalue))
minim <- resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = F)][1] + (resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = F)][1]/100) * 20
maxim <- resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = T)][1] + (resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = T)][1]/100) * 20
deg <- dim(df[which(abs(df$log2FoldChange) > 2 & df$svalue < p.value),])[1]
up <- dim(df[which(df$log2FoldChange > 2 & df$svalue < p.value),])[1]
down <- dim(df[which(df$log2FoldChange < (-2) & df$svalue < p.value),])[1]
with(resPlot, plot(log2FoldChange, -log10(svalue),
pch=20, main= paste(condition),
sub=paste( sig.genes, " significant genes (L2FC >", lfc, "& svalue <", p.value, ")"),
# " | outliers:", outliers,
# "| low counts:", low.counts ),
xlim=c(minim,maxim),
col="gray", cex.sub=0.8, col.sub="gray", cex.lab=0.8))
# Add colored points: red if svalue< p.value, orange of log2FC > lfc, green if both)
with(subset(resPlot, svalue < p.value ), points(log2FoldChange, -log10(svalue), pch=20, col="#2c7bb6"))
with(subset(resPlot, abs(log2FoldChange) > lfc), points(log2FoldChange, -log10(svalue), pch=20, col="#fdae61"))
with(subset(resPlot, svalue < p.value & (abs(log2FoldChange) > lfc)), points(log2FoldChange, -log10(svalue), pch=20, col="#d7191c"))
# Label points with the textxy function from the calibrate plot
if(sig.genes > 9){
with(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc)[1:10,], textxy(log2FoldChange, -log10(svalue), labs=Gene, cex=.6, col=rgb(0,0,0, 0.5)))
}
if(sig.genes <= 9){
with(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc), textxy(log2FoldChange, -log10(svalue), labs=Gene, cex=.6, col=rgb(0,0,0, 0.5)))
}
abline(v=c(-lfc, lfc), h=c(-log10(p.value),-log10(p.value)), col="gray", lty=2)
mtext(text = paste("UP: ", up), line = 0, adj = 1, col="gray" )
mtext(text = paste("DOWN: ", down), line = 0, adj = 0, col="gray" )
}
x <- volcano_plot(condition)
##### volcana_plot #####
volcano_plot <- function( condition = condition, org="Spis", lfc=2, svalue=0.005){
library("calibrate")
results_dir= paste("output/", org,"/DEG_tables_svalues/")
# what analysis is being performed
cat("\t Plotting volcano plot for:", condition, "\n")
cond0 <- strsplit(paste(condition, sep=""), split = "condition_")[[1]][2]
cond1 <- strsplit(cond0, split = "_vs_")[[1]][1]
cond2 <- strsplit(cond0, split = "_vs_")[[1]][2]
file <- paste(results_dir, condition, ".txt", sep="")
df <- read.table(file, sep="\t", header = T)
df <- df[order(df$svalue),]
# volcano plot
resPlot <- df
resPlot$Gene <- rownames(resPlot)
lfc <- lfc
p.value <- svalue
#sig.genes <- dim(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc))[1]
sig.genes <- sum(resPlot$svalue < p.value & abs(resPlot$log2FoldChange) > 2, na.rm=TRUE)
outliers <- sum(resPlot$baseMean > 0 & is.na(resPlot$pvalue))
low.counts <- sum(!is.na(resPlot$pvalue) & is.na(resPlot$svalue))
minim <- resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = F)][1] + (resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = F)][1]/100) * 20
maxim <- resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = T)][1] + (resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = T)][1]/100) * 20
deg <- dim(df[which(abs(df$log2FoldChange) > 2 & df$svalue < p.value),])[1]
up <- dim(df[which(df$log2FoldChange > 2 & df$svalue < p.value),])[1]
down <- dim(df[which(df$log2FoldChange < (-2) & df$svalue < p.value),])[1]
with(resPlot, plot(log2FoldChange, -log10(svalue),
pch=20, main= paste(condition),
sub=paste( sig.genes, " significant genes (L2FC >", lfc, "& svalue <", p.value, ")"),
# " | outliers:", outliers,
# "| low counts:", low.counts ),
xlim=c(minim,maxim),
col="gray", cex.sub=0.8, col.sub="gray", cex.lab=0.8))
# Add colored points: red if svalue< p.value, orange of log2FC > lfc, green if both)
with(subset(resPlot, svalue < p.value ), points(log2FoldChange, -log10(svalue), pch=20, col="#2c7bb6"))
with(subset(resPlot, abs(log2FoldChange) > lfc), points(log2FoldChange, -log10(svalue), pch=20, col="#fdae61"))
with(subset(resPlot, svalue < p.value & (abs(log2FoldChange) > lfc)), points(log2FoldChange, -log10(svalue), pch=20, col="#d7191c"))
# Label points with the textxy function from the calibrate plot
if(sig.genes > 9){
with(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc)[1:10,], textxy(log2FoldChange, -log10(svalue), labs=Gene, cex=.6, col=rgb(0,0,0, 0.5)))
}
if(sig.genes <= 9){
with(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc), textxy(log2FoldChange, -log10(svalue), labs=Gene, cex=.6, col=rgb(0,0,0, 0.5)))
}
abline(v=c(-lfc, lfc), h=c(-log10(p.value),-log10(p.value)), col="gray", lty=2)
mtext(text = paste("UP: ", up), line = 0, adj = 1, col="gray" )
mtext(text = paste("DOWN: ", down), line = 0, adj = 0, col="gray" )
}
x <- volcano_plot(condition,org = "Spis")
##### volcana_plot #####
volcano_plot <- function( condition = condition, org="Spis", lfc=2, svalue=0.005){
library("calibrate")
results_dir= paste("output/", org,"/DEG_tables_svalues/", sep = "")
# what analysis is being performed
cat("\t Plotting volcano plot for:", condition, "\n")
cond0 <- strsplit(paste(condition, sep=""), split = "condition_")[[1]][2]
cond1 <- strsplit(cond0, split = "_vs_")[[1]][1]
cond2 <- strsplit(cond0, split = "_vs_")[[1]][2]
file <- paste(results_dir, condition, ".txt", sep="")
df <- read.table(file, sep="\t", header = T)
df <- df[order(df$svalue),]
# volcano plot
resPlot <- df
resPlot$Gene <- rownames(resPlot)
lfc <- lfc
p.value <- svalue
#sig.genes <- dim(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc))[1]
sig.genes <- sum(resPlot$svalue < p.value & abs(resPlot$log2FoldChange) > 2, na.rm=TRUE)
outliers <- sum(resPlot$baseMean > 0 & is.na(resPlot$pvalue))
low.counts <- sum(!is.na(resPlot$pvalue) & is.na(resPlot$svalue))
minim <- resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = F)][1] + (resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = F)][1]/100) * 20
maxim <- resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = T)][1] + (resPlot$log2FoldChange[order(resPlot$log2FoldChange, decreasing = T)][1]/100) * 20
deg <- dim(df[which(abs(df$log2FoldChange) > 2 & df$svalue < p.value),])[1]
up <- dim(df[which(df$log2FoldChange > 2 & df$svalue < p.value),])[1]
down <- dim(df[which(df$log2FoldChange < (-2) & df$svalue < p.value),])[1]
with(resPlot, plot(log2FoldChange, -log10(svalue),
pch=20, main= paste(condition),
sub=paste( sig.genes, " significant genes (L2FC >", lfc, "& svalue <", p.value, ")"),
# " | outliers:", outliers,
# "| low counts:", low.counts ),
xlim=c(minim,maxim),
col="gray", cex.sub=0.8, col.sub="gray", cex.lab=0.8))
# Add colored points: red if svalue< p.value, orange of log2FC > lfc, green if both)
with(subset(resPlot, svalue < p.value ), points(log2FoldChange, -log10(svalue), pch=20, col="#2c7bb6"))
with(subset(resPlot, abs(log2FoldChange) > lfc), points(log2FoldChange, -log10(svalue), pch=20, col="#fdae61"))
with(subset(resPlot, svalue < p.value & (abs(log2FoldChange) > lfc)), points(log2FoldChange, -log10(svalue), pch=20, col="#d7191c"))
# Label points with the textxy function from the calibrate plot
if(sig.genes > 9){
with(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc)[1:10,], textxy(log2FoldChange, -log10(svalue), labs=Gene, cex=.6, col=rgb(0,0,0, 0.5)))
}
if(sig.genes <= 9){
with(subset(resPlot, svalue < p.value & abs(log2FoldChange) > lfc), textxy(log2FoldChange, -log10(svalue), labs=Gene, cex=.6, col=rgb(0,0,0, 0.5)))
}
abline(v=c(-lfc, lfc), h=c(-log10(p.value),-log10(p.value)), col="gray", lty=2)
mtext(text = paste("UP: ", up), line = 0, adj = 1, col="gray" )
mtext(text = paste("DOWN: ", down), line = 0, adj = 0, col="gray" )
}
x <- volcano_plot(condition,org = "Spis")
knitr::opts_chunk$set(echo = TRUE)
library('tximport')
library('rhdf5')
library("DESeq2")
library('DT')
library('tictoc')
library('apeglm')
source('import_kallisto2DESeq.R')
source('create_conditions.R')
source('deg_analysis.R')
source('volcano_plot.R')
cat("Plotting volcano plots.\n")
pb <- txtProgressBar(min = 1, max = length(conditions), style = 3)
org = "Spis"
for(condition in conditions){
pdf(file=paste("output/",org,"/volcano_plots_svalues/",condition,"_volcano.pdf", sep=""))
volcano_plot(condition = condition, org="Spis", lfc=2, svalue=0.005)
dev.off()
setTxtProgressBar(pb, condition)
}
close(pb)
cat("Plotting volcano plots.\n")
pb <- txtProgressBar(min = 1, max = length(conditions), style = 3)
org = "Spis"
for(condition in conditions){
pdf(file=paste("output/",org,"/volcano_plots_svalues/",condition,"_volcano.pdf", sep=""))
volcano_plot(condition = condition, org="Spis", lfc=2, svalue=0.005)
dev.off()
setTxtProgressBar(pb, condition)
}
close(pb)
pb
lenth(conditions)
length(conditions)
txtProgressBar(min = 1, max = length(conditions), style = 3)
cat("Plotting volcano plots.\n")
pb <- txtProgressBar(min = 1, max = length(conditions), style = 3)
org = "Spis"
for(condition in conditions){
pdf(file=paste("output/",org,"/volcano_plots_svalues/",condition,"_volcano.pdf", sep=""))
volcano_plot(condition = condition, org="Spis", lfc=2, svalue=0.005)
setTxtProgressBar(pb, condition)
dev.off()
}
close(pb)
pb <- txtProgressBar(min = 1, max = length(conditions), style = 3)
for(i in 1:66){ print(i) setTxtProgressBar(pb,i)}close(pb)
for(i in 1:66){ print(i) setTxtProgressBar(pb,i)} close(pb)
for(i in 1:66){ print(i) setTxtProgressBar(pb,i)} close(pb)
for(i in 1:66){
print(i)
setTxtProgressBar(pb,i)
}
close(pb)
pb <- txtProgressBar(min = 1, max = length(conditions), style = 2)
for(i in 1:66){
print(i)
setTxtProgressBar(pb,i)
}
close(pb)
pb <- txtProgressBar(min = 1, max = length(conditions), style = 1)
for(i in 1:66){
print(i)
setTxtProgressBar(pb,i)
}
close(pb)
pb <- txtProgressBar(min = 1, max = length(conditions), style = 4)
for(i in 1:66){
print(i)
setTxtProgressBar(pb,i)
}
close(pb)
pb <- txtProgressBar(min = 1, max = length(conditions), style = 5)
for(i in 1:66){
print(i)
setTxtProgressBar(pb,i)
}
close(pb)
pb <- txtProgressBar(min = 1, max = length(conditions), style = 3)
for(i in 1:66){
print(i)
setTxtProgressBar(pb,i)
}
close(pb)
hg <- read.delim("~/Google Drive File Stream/My Drive/Proposals/U19-Cdiff/Portal/Model Imports/modules_enrichment_TFregulons_v2_0910.csv", sep="\t", header = T)
hg.new <- data.frame()
for(module in unique(hg$Module)){
TF.collated <- paste(hg[which(hg$Module == module),"TF"], sep="", collapse = "|")
hg.new <- rbind(hg.new, cbind(Module=module, TFs=TF.collated))
}
write.table(hg.new, file="~/Google Drive File Stream/My Drive/Proposals/U19-Cdiff/Portal/Model Imports/tf.module.hypergeometric.network.collated_v2txt", sep="\t", row.names=F)
View(hg)
hg <- read.delim("~/Google Drive File Stream/My Drive/Proposals/U19-Cdiff/Portal/Model Imports/modules_enrichment_TFregulons_v2_0910.csv", sep=",", header = T)
View(hg)
hg.new <- data.frame()
for(module in unique(hg$Module)){
TF.collated <- paste(hg[which(hg$Module == module),"TF"], sep="", collapse = "|")
hg.new <- rbind(hg.new, cbind(Module=module, TFs=TF.collated))
}
View(hg.new)
write.table(hg.new, file="~/Google Drive File Stream/My Drive/Proposals/U19-Cdiff/Portal/Model Imports/tf.module.hypergeometric.network.collated_v2.txt", sep="\t", row.names=F)
library('GEOquery')
library('GEOmetadb')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOmetadb")
library('GEOquery')
library('GEOmetadb')
i
if(!file.exists('GEOmetadb.sqlite')) getSQLiteFile()
# Build the site
wflow_build()
library("workflowr")
# Build the site
wflow_build()
setwd("~/Documents/GitHub/CBASS84/CBASS84_RNASeq/RNASeq_Analysis")
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
?pdf
dev.off()
# Build the site
wflow_build()
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=Temp, shape=Reef.Site.Name) ) +
geom_point(size=6) +
scale_colour_manual(values=c("Black", "Black", "Black"))+
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20"))+  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed()+
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
}
library('tximport')
library('rhdf5')
library("DESeq2")
library('DT')
library('tictoc')
library('apeglm')
library('viridis')
source('code/import_kallisto2DESeq.R')
# Build the site
wflow_build()
org="Spis"
results_dir= paste("output/", org,"/summary_plots/", sep = "")
plot_topn_heatmap(org = "Spis",n = 50,dds=deseq_data$dds.Spis)
library('pheatmap')
##### 1. plot heatmap for top 50/100 genes #####
plot_topn_heatmap <- function(org=c("Spis","Smic"), dds=deseq_data$dds.Spis, n=50){
cat("Creating Heatmap for :", org, "\n")
# 1. heatmap
#dds.Spis <- DESeq(dds.Spis, parallel=F) # run DESeq2
vsd <- vst(dds, blind=FALSE) # data transformation for visuals
select <- order(rowMeans(counts(dds,normalized=TRUE)), # select top 100 most diff expressed
decreasing=T)[1:n]
df.annotate <- as.data.frame(colData(dds)[,c("Temp","Reef.Site.Name")])
df.assay <- assay(vsd)[select,]
## do not plot initially to get row ordering and reordering
phm <- pheatmap(df.assay, scale = "none", cluster_rows=T, silent = T)
phmr <- phm$tree_row$order
df.order <- df.assay[rev(phmr),rownames(df.annotate[order(factor(df.annotate$Reef.Site.Name, levels=c("Protected","Exposed","AF","ICN")),df.annotate$Temp),])]
heatmap.plot <- pheatmap(df.order, scale = "none", cluster_rows=F, border_color = NA, show_rownames=TRUE, # heatmap
cluster_cols=F, annotation_col=df.annotate, main = paste(org, " Top ",n, "DEGs", sep = ""), fontsize_col = 7, fontsize_row = 6, color = viridis(20) )
}
org="Spis"
results_dir= paste("output/", org,"/summary_plots/", sep = "")
plot_topn_heatmap(org = "Spis",n = 50,dds=deseq_data$dds.Spis)
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build()
# Build the site
wflow_build(update = T)
# Build the site
wflow_build()
deseq_data <- readRDS('data/deseq_data.RDS')
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=Temp, shape=Reef.Site.Name) ) +
geom_point(size=6) +
scale_colour_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed() +
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
print(q)
}
plot_pca(org = "Spis",vsd = deseq_data$vsd.Spis)
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=Temp, shape=Reef.Site.Name) ) +
geom_point(size=6) +
scale_colour_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
#scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed() +
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
print(q)
}
plot_pca(org = "Spis",vsd = deseq_data$vsd.Spis)
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=factor(Temp), shape=Reef.Site.Name) ) +
geom_point(size=6) +
scale_colour_manual(values=c("Black", "Black", "Black")) +
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed() +
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
print(q)
}
plot_pca(org = "Spis",vsd = deseq_data$vsd.Spis)
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
vsd=deseq_data$vsd.Spis
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
View(pcaData)
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=Temp, shape=Reef.Site.Name) ) +
geom_point(size=6) +
scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
scale_colour_manual(values=c("Black", "Black", "Black")) +
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed() +
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
print(q)
}
plot_pca(org = "Spis",vsd = deseq_data$vsd.Spis)
# Build the site
wflow_build()
# Build the site
wflow_build()
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=Temp, shape=factor(Reef.Site.Name,levels = c("ICN","AF","Exposed","Protected"))) ) +
geom_point(size=6) +
scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
scale_colour_manual(values=c("Black", "Black", "Black")) +
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed() +
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
print(q)
}
plot_pca(org = "Spis",vsd = deseq_data$vsd.Spis)
library('ggplot2')
##### 2. plot_pca: CA Plot #####
plot_pca <- function(org=c("Spis","Smic"),vsd=deseq_data$vsd.Spis){
cat("Creating PCA plot for :", org, "\n")
vsd <- vsd
# remove outlier ES1-36A and create PCA object
pcaData <- plotPCA(vsd[,grep("ES1-36A", colnames(vsd), invert = T)], intgroup=c("Temp","Reef.Site.Name","condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
q <- ggplot(pcaData, aes(PC1, PC2, fill=Temp, shape=Reef.Site.Name) ) +
geom_point(size=6) +
scale_fill_manual(values=c("#ffeda0", "#feb24c", "#f03b20")) +  #for 30,33,36 use c("#ffeda0", "#feb24c", "#f03b20")
scale_colour_manual(values=c("Black", "Black", "Black")) +
scale_shape_manual(values=c(21,22,24,23)) + #for c(Eilat, KAUST, Exposed, Protected) use shapes or 21,24, 22, 23
#geom_text(aes(label=condition)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_light() + coord_fixed() +
theme(text = element_text(family = "Helvetica"),
axis.text.y = element_text(angle = 0, size=14),
axis.text.x = element_text(angle = 0, size=14),
axis.title = element_text(size= 16)
)
print(q)
}
plot_pca(org = "Spis",vsd = deseq_data$vsd.Spis)
